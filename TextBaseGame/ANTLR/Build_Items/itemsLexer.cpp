// Generated from items.g4 by ANTLR 4.6

#include "itemsLexer.h"

using namespace antlr4;

itemsLexer::itemsLexer(CharStream *input) : Lexer(input) {
	_interpreter = new atn::LexerATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

itemsLexer::~itemsLexer() {
	delete _interpreter;
}

std::string itemsLexer::getGrammarFileName() const {
	return "items.g4";
}

const std::vector<std::string>& itemsLexer::getRuleNames() const {
	return _ruleNames;
}

const std::vector<std::string>& itemsLexer::getModeNames() const {
	return _modeNames;
}

const std::vector<std::string>& itemsLexer::getTokenNames() const {
	return _tokenNames;
}

dfa::Vocabulary& itemsLexer::getVocabulary() const {
	return _vocabulary;
}

const std::vector<uint16_t> itemsLexer::getSerializedATN() const {
	return _serializedATN;
}

const atn::ATN& itemsLexer::getATN() const {
	return _atn;
}

// Static vars and initialization.
std::vector<dfa::DFA> itemsLexer::_decisionToDFA;
atn::PredictionContextCache itemsLexer::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN itemsLexer::_atn;
std::vector<uint16_t> itemsLexer::_serializedATN;

std::vector<std::string> itemsLexer::_ruleNames = {
  "ITEM", "LCB", "RCB", "EQ", "SC", "CM", "ID", "STRING", "INT", "WS", "SPACE"
};

std::vector<std::string> itemsLexer::_modeNames = {
  "DEFAULT_MODE"
};

std::vector<std::string> itemsLexer::_literalNames = {
  "", "'item'", "'{'", "'}'", "'='", "';'", "','", "", "", "", "", "' '"
};

std::vector<std::string> itemsLexer::_symbolicNames = {
  "", "ITEM", "LCB", "RCB", "EQ", "SC", "CM", "ID", "STRING", "INT", "WS",
  "SPACE"
};

dfa::Vocabulary itemsLexer::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> itemsLexer::_tokenNames;

itemsLexer::Initializer::Initializer() {
	// This code could be in a static initializer lambda, but VS doesn't allow access to private class members from there.
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		}
		else {
			_tokenNames.push_back(name);
		}
	}

	_serializedATN = {
	  0x3, 0x430, 0xd6d1, 0x8206, 0xad2d, 0x4417, 0xaef1, 0x8d80, 0xaadd,
	  0x2, 0xd, 0x4b, 0x8, 0x1, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4,
	  0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9,
	  0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 0x4,
	  0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3,
	  0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x5, 0x3,
	  0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x7, 0x3, 0x7, 0x3, 0x8, 0x3, 0x8, 0x7,
	  0x8, 0x2b, 0xa, 0x8, 0xc, 0x8, 0xe, 0x8, 0x2e, 0xb, 0x8, 0x3, 0x9, 0x3,
	  0x9, 0x7, 0x9, 0x32, 0xa, 0x9, 0xc, 0x9, 0xe, 0x9, 0x35, 0xb, 0x9, 0x3,
	  0x9, 0x3, 0x9, 0x3, 0xa, 0x5, 0xa, 0x3a, 0xa, 0xa, 0x3, 0xa, 0x6, 0xa,
	  0x3d, 0xa, 0xa, 0xd, 0xa, 0xe, 0xa, 0x3e, 0x3, 0xb, 0x6, 0xb, 0x42,
	  0xa, 0xb, 0xd, 0xb, 0xe, 0xb, 0x43, 0x3, 0xb, 0x3, 0xb, 0x3, 0xc, 0x3,
	  0xc, 0x3, 0xc, 0x3, 0xc, 0x2, 0x2, 0xd, 0x3, 0x3, 0x5, 0x4, 0x7, 0x5,
	  0x9, 0x6, 0xb, 0x7, 0xd, 0x8, 0xf, 0x9, 0x11, 0xa, 0x13, 0xb, 0x15,
	  0xc, 0x17, 0xd, 0x3, 0x2, 0x8, 0x4, 0x2, 0x43, 0x5c, 0x63, 0x7c, 0x6,
	  0x2, 0x32, 0x3b, 0x43, 0x5c, 0x61, 0x61, 0x63, 0x7c, 0x3, 0x2, 0x24,
	  0x24, 0x4, 0x2, 0x2d, 0x2d, 0x2f, 0x2f, 0x3, 0x2, 0x32, 0x3b, 0x5, 0x2,
	  0xb, 0xc, 0xf, 0xf, 0x22, 0x22, 0x4f, 0x2, 0x3, 0x3, 0x2, 0x2, 0x2,
	  0x2, 0x5, 0x3, 0x2, 0x2, 0x2, 0x2, 0x7, 0x3, 0x2, 0x2, 0x2, 0x2, 0x9,
	  0x3, 0x2, 0x2, 0x2, 0x2, 0xb, 0x3, 0x2, 0x2, 0x2, 0x2, 0xd, 0x3, 0x2,
	  0x2, 0x2, 0x2, 0xf, 0x3, 0x2, 0x2, 0x2, 0x2, 0x11, 0x3, 0x2, 0x2, 0x2,
	  0x2, 0x13, 0x3, 0x2, 0x2, 0x2, 0x2, 0x15, 0x3, 0x2, 0x2, 0x2, 0x2, 0x17,
	  0x3, 0x2, 0x2, 0x2, 0x3, 0x19, 0x3, 0x2, 0x2, 0x2, 0x5, 0x1e, 0x3, 0x2,
	  0x2, 0x2, 0x7, 0x20, 0x3, 0x2, 0x2, 0x2, 0x9, 0x22, 0x3, 0x2, 0x2, 0x2,
	  0xb, 0x24, 0x3, 0x2, 0x2, 0x2, 0xd, 0x26, 0x3, 0x2, 0x2, 0x2, 0xf, 0x28,
	  0x3, 0x2, 0x2, 0x2, 0x11, 0x2f, 0x3, 0x2, 0x2, 0x2, 0x13, 0x39, 0x3,
	  0x2, 0x2, 0x2, 0x15, 0x41, 0x3, 0x2, 0x2, 0x2, 0x17, 0x47, 0x3, 0x2,
	  0x2, 0x2, 0x19, 0x1a, 0x7, 0x6b, 0x2, 0x2, 0x1a, 0x1b, 0x7, 0x76, 0x2,
	  0x2, 0x1b, 0x1c, 0x7, 0x67, 0x2, 0x2, 0x1c, 0x1d, 0x7, 0x6f, 0x2, 0x2,
	  0x1d, 0x4, 0x3, 0x2, 0x2, 0x2, 0x1e, 0x1f, 0x7, 0x7d, 0x2, 0x2, 0x1f,
	  0x6, 0x3, 0x2, 0x2, 0x2, 0x20, 0x21, 0x7, 0x7f, 0x2, 0x2, 0x21, 0x8,
	  0x3, 0x2, 0x2, 0x2, 0x22, 0x23, 0x7, 0x3f, 0x2, 0x2, 0x23, 0xa, 0x3,
	  0x2, 0x2, 0x2, 0x24, 0x25, 0x7, 0x3d, 0x2, 0x2, 0x25, 0xc, 0x3, 0x2,
	  0x2, 0x2, 0x26, 0x27, 0x7, 0x2e, 0x2, 0x2, 0x27, 0xe, 0x3, 0x2, 0x2,
	  0x2, 0x28, 0x2c, 0x9, 0x2, 0x2, 0x2, 0x29, 0x2b, 0x9, 0x3, 0x2, 0x2,
	  0x2a, 0x29, 0x3, 0x2, 0x2, 0x2, 0x2b, 0x2e, 0x3, 0x2, 0x2, 0x2, 0x2c,
	  0x2a, 0x3, 0x2, 0x2, 0x2, 0x2c, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x2d, 0x10,
	  0x3, 0x2, 0x2, 0x2, 0x2e, 0x2c, 0x3, 0x2, 0x2, 0x2, 0x2f, 0x33, 0x7,
	  0x24, 0x2, 0x2, 0x30, 0x32, 0xa, 0x4, 0x2, 0x2, 0x31, 0x30, 0x3, 0x2,
	  0x2, 0x2, 0x32, 0x35, 0x3, 0x2, 0x2, 0x2, 0x33, 0x31, 0x3, 0x2, 0x2,
	  0x2, 0x33, 0x34, 0x3, 0x2, 0x2, 0x2, 0x34, 0x36, 0x3, 0x2, 0x2, 0x2,
	  0x35, 0x33, 0x3, 0x2, 0x2, 0x2, 0x36, 0x37, 0x7, 0x24, 0x2, 0x2, 0x37,
	  0x12, 0x3, 0x2, 0x2, 0x2, 0x38, 0x3a, 0x9, 0x5, 0x2, 0x2, 0x39, 0x38,
	  0x3, 0x2, 0x2, 0x2, 0x39, 0x3a, 0x3, 0x2, 0x2, 0x2, 0x3a, 0x3c, 0x3,
	  0x2, 0x2, 0x2, 0x3b, 0x3d, 0x9, 0x6, 0x2, 0x2, 0x3c, 0x3b, 0x3, 0x2,
	  0x2, 0x2, 0x3d, 0x3e, 0x3, 0x2, 0x2, 0x2, 0x3e, 0x3c, 0x3, 0x2, 0x2,
	  0x2, 0x3e, 0x3f, 0x3, 0x2, 0x2, 0x2, 0x3f, 0x14, 0x3, 0x2, 0x2, 0x2,
	  0x40, 0x42, 0x9, 0x7, 0x2, 0x2, 0x41, 0x40, 0x3, 0x2, 0x2, 0x2, 0x42,
	  0x43, 0x3, 0x2, 0x2, 0x2, 0x43, 0x41, 0x3, 0x2, 0x2, 0x2, 0x43, 0x44,
	  0x3, 0x2, 0x2, 0x2, 0x44, 0x45, 0x3, 0x2, 0x2, 0x2, 0x45, 0x46, 0x8,
	  0xb, 0x2, 0x2, 0x46, 0x16, 0x3, 0x2, 0x2, 0x2, 0x47, 0x48, 0x7, 0x22,
	  0x2, 0x2, 0x48, 0x49, 0x3, 0x2, 0x2, 0x2, 0x49, 0x4a, 0x8, 0xc, 0x2,
	  0x2, 0x4a, 0x18, 0x3, 0x2, 0x2, 0x2, 0x8, 0x2, 0x2c, 0x33, 0x39, 0x3e,
	  0x43, 0x3, 0x8, 0x2, 0x2,
	};

	atn::ATNDeserializer deserializer;
	_atn = deserializer.deserialize(_serializedATN);

	size_t count = _atn.getNumberOfDecisions();
	_decisionToDFA.reserve(count);
	for (size_t i = 0; i < count; i++) {
		_decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
	}
}

itemsLexer::Initializer itemsLexer::_init;